---
// Type
interface Props {
  color: string;
  variant: "triangle" | "triangle-assymetric";
  top: boolean;
  height?: number;
}

// Props
const { color, variant, height = "", top } = Astro.props as Props;
---

<div
  class="custom-shape-divider-bottom"
  class:list={[`shape-divider`, { "top-0": top }, { "bottom-0": !top }]}
>
  <svg
    data-name="Layer 1"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 1200 120"
    preserveAspectRatio="none"
  >
    {
      variant === "triangle" && (
        <path
          d="M598.97 114.72L0 0 0 120 1200 120 1200 0 598.97 114.72z"
          style="fill: var(--color); height: var(--height)"
        />
      )
    }
    {
      variant === "triangle-assymetric" && (
        <path
          d="M892.25 114.72L0 0 0 120 1200 120 1200 0 892.25 114.72z"
          style="fill: var(--color); height: var(--height)"
        />
      )
    }
  </svg>
</div>

<style define:vars={{ color, height }}>
  .shape-divider {
    position: absolute;
    width: 100%;
    overflow: hidden;
    line-height: 0;
    left: 0;
  }
</style>
