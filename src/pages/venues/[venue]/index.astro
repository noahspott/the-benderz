---
/**
 * Venue Template Page
 *
 * This page is used to display a single venue's information.
 * It includes the venue's name, description, address, website, and gallery photos.
 * It also includes a list of upcoming shows at the venue.
 *
 */
export const prerender = false;

// Global components
import Layout from "../../../layouts/Layout.astro";
import {
  UpcomingShows,
  TitleHeaderSubpage,
  ContactSection,
} from "../../../components";

// Local components
import { Gallery7 } from "../../../components/venue/Gallery7";
import AboutSection from "../../../components/venue/AboutSection.astro";

// Images
import defaultImage from "../../../assets/images/layered-peaks-bg.svg";

// Sanity
import { getVenues, executeQuery } from "../../../lib/sanity";
import type { Venue, Event } from "../../../types/types";
import { getYesterday } from "../../../lib/dateHelpers";

type VenueProps = {
  venueData: Venue;
};

const { venue } = Astro.params;

// Add validation for the venue slug
if (!venue || typeof venue !== "string") {
  return Astro.redirect("/404");
}

const venueFilter = `{venue: {slug: {current: {eq: "${venue}"}}}}`;
const sortFilter = `[{date: ASC}]`;

// First, get the venue data
const venueResponse = await executeQuery<{ allVenue: Venue[] }>(`
  query {
    allVenue(where: {slug: {current: {eq: "${venue}"}}}) {
      name
      description
      address {
        city
        state
      }
      image {
        asset {
          url
        }
      }
      website
      slug {
        current
      }
      galleryPhotos {
        asset {
          url
        }
      }
    }
  }
`);

// Check if venue exists
const venueData = venueResponse?.allVenue[0];
if (!venueData) {
  return Astro.redirect("/404");
}

// Then, get the events for this venue
const eventsResponse = await executeQuery<{ allEvent: Event[] }>(`
  query {
    allEvent(
      where: ${venueFilter},
      sort: ${sortFilter}
    ) {
      date
      slug {
        current
      }
      venue {
        name
        slug {
          current
        }
        address {
          city
          state
        }
      }
    }
  }
`);

let events: Event[] = eventsResponse?.allEvent || [];

// Filter future event
events = events.filter((event: Event) => {
  return new Date(event.date) > getYesterday();
});

// Get the gallery images for the venue
let galleryImages: { src: string; alt: string }[] = [];
if (venueData.galleryPhotos) {
  galleryImages = venueData.galleryPhotos.map((photo) => ({
    src: photo.asset.url,
    alt: venueData.name,
  }));
}

const venueImage = venueData?.image?.asset?.url;

// Copy
const contactHeading = "Say Hello ðŸ‘‹";
---

<Layout
  title={`${venueData.name} | The Benderz`}
  description={`The Benderz at ${venueData.name}`}
>
  <TitleHeaderSubpage
    headline={venueData.name}
    description={`${venueData.address.city}, ${venueData.address.state}`}
  />
  {
    venueData.description && (
      <AboutSection
        city={venueData.address.city}
        state={venueData.address.state}
        description={venueData.description}
        aboutImage={venueImage}
        venueWebsite={venueData.website}
      />
    )
  }
  <UpcomingShows
    kicker="Upcoming Shows"
    headline={`The Benderz at ${venueData.name}`}
    events={events}
  />
  {
    galleryImages.length > 0 && (
      <Gallery7
        heading={`The Benderz at ${venueData.name}`}
        images={galleryImages}
      />
    )
  }
  <ContactSection client:load heading={contactHeading} />
</Layout>
