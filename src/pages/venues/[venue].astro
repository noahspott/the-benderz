---
/**
 * Venue Template Page
 *
 * This page is used to display a single venue's information.
 * It includes the venue's name, description, address, website, and gallery photos.
 * It also includes a list of upcoming shows at the venue.
 *
 */
export const prerender = true;

import type { GetStaticPaths } from "astro";

// Global components
import Layout from "../../layouts/Layout.astro";
import {
  UpcomingShows,
  TitleHeaderSubpage,
  ContactSection,
} from "../../components";

// Local components
import { Gallery7 } from "../../components/venue/Gallery7";
import AboutSection from "../../components/venue/AboutSection.astro";

// Images
import defaultImage from "../../assets/images/layered-peaks-bg.svg";

// Sanity
import { getVenues, executeQuery } from "../../lib/sanity";
import type { Venue, Event } from "../../types/types";

type VenueProps = {
  venueData: Venue;
};

// Get the static paths for the venues
export async function getStaticPaths() {
  // Get the venues
  const venues = await getVenues();

  return venues.map((venue: Venue) => {
    console.log("Generating Venue Page for:", venue.slug.current);
    return {
      params: { venue: venue?.slug?.current },
      props: { venueData: venue },
    };
  });
}

const { venueData } = Astro.props as VenueProps;

const todayAt0 = new Date().toISOString();
const venueFilter = `{venue: {name: {eq: "${venueData.name.toString()}"}}}`;
const sortFilter = `[{date: ASC}]`;

// Get the events for the venue
const response = await executeQuery<{ allEvent: Event[] }>(`
  query {
    allEvent (where: ${venueFilter}, sort: ${sortFilter}) {
      date
      venue {      
        name
        description
        address {
          city
          state
        }
        image {
          asset {
            url
          }
        }
        website
        slug {
          current
        }
      }
      slug {
        current
      }
    }
  }
`);

let events: Event[] = [];

// Make sure the response is valid
if (response) {
  events = response.allEvent;

  // Filter out events that are in the past
  events = events.filter((event: Event) => {
    return new Date(event.date) > new Date();
  });
}

// Get the gallery images for the venue
let galleryImages: { src: string; alt: string }[] = [];
if (venueData.galleryPhotos) {
  galleryImages = venueData.galleryPhotos.map((photo) => ({
    src: photo.asset.url,
    alt: venueData.name,
  }));
}
---

<Layout
  title={`${venueData.name} | The Benderz`}
  description={`The Benderz at ${venueData.name}`}
>
  <TitleHeaderSubpage
    headline={venueData.name}
    description={`${venueData.address.city}, ${venueData.address.state}`}
  />
  {
    venueData.description && (
      <AboutSection
        city={venueData.address.city}
        state={venueData.address.state}
        description={venueData.description}
        aboutImage={venueData.image?.asset.url || defaultImage}
        venueWebsite={venueData.website}
      />
    )
  }
  <UpcomingShows
    kicker="Upcoming Shows"
    headline={`The Benderz at ${venueData.name}`}
    events={events}
  />
  {
    galleryImages.length > 0 && (
      <Gallery7
        heading={`The Benderz at ${venueData.name}`}
        images={galleryImages}
      />
    )
  }
  <ContactSection client:load heading="Contact Us" />
</Layout>
